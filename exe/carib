#!/usr/bin/env ruby
$:.unshift(File.join(File.dirname(__FILE__), '..', 'lib'))

require 'shja'
require 'optparse'
require 'logger'

log_level = 'debug'

format = nil
start_page = 0
last_page = 0
html_disable   = false

random = false
count = 1
movie_id = []
actor_name = nil

config = {}
config[:username]    = ENV['CARIB_USERNAME']
config[:password]    = ENV['CARIB_PASSWORD']
config[:answer]      = ENV['CARIB_ANSWER']
config[:target_dir]  = ENV['CARIB_TARGET_DIR']

parser = OptionParser.new
parser.on('--log-level LOG_LEVEL') {|v| log_level = v }

subparsers = Hash.new {|h,k|
  $stderr.puts "no such subcommand: #{k}"
  exit 1
}
subparsers['refresh'] = OptionParser.new
subparsers['refresh'].on('-l', '--last-page LAST_PAGE') {|v| last_page = v.to_i }
subparsers['refresh'].on('-s', '--start-page START_PAGE') {|v| start_page = v.to_i }
subparsers['refresh'].on('--html-disable HTML_DISABLE') {|v| html_disable = (v == 'true')}
subparsers['download'] = OptionParser.new
subparsers['download'].on('-f FORMAT') {|v| format = v }
subparsers['download'].on('-r RANDOM') {|v| random = (v == 'true') }
subparsers['download'].on('-c COUNT') {|v| count = v.to_i }
subparsers['download'].on('-m MOVIE_ID') {|v| movie_id << v.to_i }
subparsers['download'].on('-a ACTOR_NAME') {|v| actor_name << v }
subparsers['download'].on('--html-disable HTML_DISABLE') {|v| html_disable = (v == 'true')}
subparsers['html'] = OptionParser.new

parser.order!(ARGV)
subcommand = ARGV.shift
subparsers[subcommand].parse!(ARGV) unless ARGV.empty?

unless config[:username] && config[:password] && config[:answer] && config[:target_dir]
  raise "Required parameter is not specified: #{config}"
end

Shja.log.level = eval("::Logger::#{log_level.upcase}")
client = Shja::Client::Carib.new(**config)

if subcommand == 'refresh'
  client.refresh!
  client.generate_html unless html_disable
end

if subcommand == 'download'
  if movie_id.size > 0
    movie_id.each do |id|
      client.download_by_id(id, format)
    end
  elsif actor_name
    client.download_by_actor(actor_name, format)
  elsif random
    client.random_download(count, format)
  else
    client.download_by_latest(count, format)
  end
  client.generate_html unless html_disable
end

if subcommand == 'html'
  client.generate_html
end
